/* stylelint-disable no-duplicate-selectors */
/* stylelint-disable scss/double-slash-comment-empty-line-before */
/* stylelint-disable scss/dollar-variable-empty-line-before */

@use 'sass:color';
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

$namespace: 'vxp' !default;

@function to-css-var-name($name-units...) {
  $name: '--' + $namespace;

  @each $unit in $name-units {
    @if $unit != '' {
      $name: $name + '-' + $unit;
    }
  }

  @return $name;
}

@function get-css-var($name-units...) {
  @return var(#{to-css-var-name($name-units...)});
}

@mixin define-css-var($name-units, $value) {
  #{to-css-var-name($name-units...)}: #{$value};
}

@mixin define-preset-values($base-name, $style-map, $inspect: false) {
  @each $name in map.keys($style-map) {
    @include define-css-var(
      ($base-name, $name),
      if($inspect, #{meta.inspect(map.get($style-map, $name))}, map.get($style-map, $name))
    );
  }
}

@mixin define-preset-style($base-name, $style-map) {
  @each $name in map.keys($style-map) {
    $style-units: map.get($style-map, $name);

    @if list.length($style-units) != 0 {
      @include define-css-var(($base-name, $name), get-css-var($style-units...));
    }
  }
}

$color-black: #000 !default;
$color-white: #fff !default;

$types: primary, info, success, warning, error;

$color-map: () !default;
$color-map: map.deep-merge(
  (
    primary: (
      base: #339af0
    ),
    info: (
      base: #3bc9db
    ),
    success: (
      base: #20c997
    ),
    warning: (
      base: #fab005
    ),
    error: (
      base: #f03e3e
    )
  ),
  $color-map
);

@mixin define-level-colors($type, $max-lavel, $mode, $mixed-color) {
  @for $i from 1 through $max-lavel {
    $color-map: map.deep-merge(
      (
        $type: (
          '#{$mode}-#{$i}': color.mix(
            $mixed-color,
            map.get($color-map, $type, 'base'),
            math.percentage(math.div($i, 10))
          )
        )
      ),
      $color-map
    ) !global;
  }
}

@mixin define-type-color($type) {
  $colors: map.get($color-map, $type);

  @each $name in map.keys($colors) {
    @include define-css-var(('color', $type, $name), map.get($colors, $name));
  }
}

:root {
  @include define-css-var('color-black', $color-black);
  @include define-css-var('color-white', $color-white);

  @each $type in $types {
    @include define-level-colors($type, 9, 'light', $color-white);
    @include define-level-colors($type, 2, 'dark', $color-black);
    @include define-type-color($type);
  }
}

$vxp-color-black: #000 !default;
$vxp-color-white: #fff !default;

$vxp-color-primary: #339af0 !default; // $oc-blue-5
$vxp-color-primary-light-1: color.mix($vxp-color-white, $vxp-color-primary, 10%) !default;
$vxp-color-primary-light-2: color.mix($vxp-color-white, $vxp-color-primary, 20%) !default;
$vxp-color-primary-dark-1: color.mix($vxp-color-black, $vxp-color-primary, 10%) !default;
$vxp-color-primary-dark-2: color.mix($vxp-color-black, $vxp-color-primary, 20%) !default;

$vxp-color-info: #3bc9db !default; // $oc-cyan-4
$vxp-color-info-light-1: color.mix($vxp-color-white, $vxp-color-info, 10%) !default;
$vxp-color-info-light-2: color.mix($vxp-color-white, $vxp-color-info, 20%) !default;
$vxp-color-info-dark-1: color.mix($vxp-color-black, $vxp-color-info, 10%) !default;
$vxp-color-info-dark-2: color.mix($vxp-color-black, $vxp-color-info, 20%) !default;

$vxp-color-success: #20c997 !default; // $oc-teal-5
$vxp-color-success-light-1: color.mix($vxp-color-white, $vxp-color-success, 10%) !default;
$vxp-color-success-light-2: color.mix($vxp-color-white, $vxp-color-success, 20%) !default;
$vxp-color-success-dark-1: color.mix($vxp-color-black, $vxp-color-success, 10%) !default;
$vxp-color-success-dark-2: color.mix($vxp-color-black, $vxp-color-success, 20%) !default;

$vxp-color-warning: #fab005 !default; // $oc-yellow-6
$vxp-color-warning-light-1: color.mix($vxp-color-white, $vxp-color-warning, 10%) !default;
$vxp-color-warning-light-2: color.mix($vxp-color-white, $vxp-color-warning, 20%) !default;
$vxp-color-warning-dark-1: color.mix($vxp-color-black, $vxp-color-warning, 10%) !default;
$vxp-color-warning-dark-2: color.mix($vxp-color-black, $vxp-color-warning, 20%) !default;

$vxp-color-error: #f03e3e !default; // $oc-red-7
$vxp-color-error-light-1: color.mix($vxp-color-white, $vxp-color-error, 10%) !default;
$vxp-color-error-light-2: color.mix($vxp-color-white, $vxp-color-error, 20%) !default;
$vxp-color-error-dark-1: color.mix($vxp-color-black, $vxp-color-error, 10%) !default;
$vxp-color-error-dark-2: color.mix($vxp-color-black, $vxp-color-error, 20%) !default;

$vxp-color-content-primary: #212529 !default; // $oc-gray-9
$vxp-color-content-normal: #495057 !default; // $oc-gray-7
$vxp-color-content-secondary: #868e96 !default; // $oc-gray-6
$vxp-color-content-disabled: #adb5bd !default; // $oc-gray-5
$vxp-color-content-placeholder: #ced4da !default; // $oc-gray-4
$vxp-color-content-humble: #dee2e6 !default; // $oc-gray-3
$vxp-color-content-reverse: $vxp-color-white !default;

$content-color-map: () !default;
$content-color-map: map.merge(
  (
    primary: #212529,
    base: #495057,
    secondary: #868e96,
    disabled: #adb5bd,
    placeholder: #ced4da,
    humble: #dee2e6,
    reverse: #fff
  ),
  $content-color-map
);

:root {
  @include define-preset-values('content-color', $content-color-map);
}

$vxp-color-border: #ced4da !default; // $oc-gray-4
$vxp-color-border-light-1: #dee2e6 !default; // $oc-gray-3
$vxp-color-border-light-2: #e9ecef !default; // $oc-gray-2
$vxp-color-border-dark-1: #adb5bd !default; // $oc-gray-5
$vxp-color-border-dark-2: #868e96 !default; // $oc-gray-6

$border-color-map: () !default;
$border-color-map: map.merge(
  (
    base: #ced4da,
    light-1: #dee2e6,
    light-2: #e9ecef,
    dark-1: #adb5bd,
    dark-2: #868e96
  ),
  $border-color-map
);

:root {
  @include define-preset-values('border-color', $border-color-map);
}

// 需要填充的元素的底色
$vxp-color-fill: $vxp-color-white !default;
// 填充了颜色的元素禁用时的填充
$vxp-color-fill-disabled: #dee2e6 !default; // $oc-gray-3
// 填充底色元素 hover 状态的填充
$vxp-color-fill-hover: #e9ecef !default; // $oc-gray-2
// 需要简单区分填充的元素的底色
$vxp-color-fill-background: #f8f9fa !default; // $oc-gray-0
// 需要填充的元素的反色
$vxp-color-fill-reverse: #212529 !default;

$fill-color-map: () !default;
$fill-color-map: map.merge(
  (
    base: #fff,
    secondary: #d9dfe2,
    disabled: #dee2e6,
    hover: #e9ecef,
    humble: #f3f4f6,
    background: #f8f9fa,
    reverse: #212529
  ),
  $fill-color-map
);

:root {
  @include define-preset-values('fill-color', $fill-color-map);
}

$vxp-font-size: 0.875rem !default;
$vxp-font-size-primary: 1.15em !default;
$vxp-font-size-secondary: 0.75em !default;

$font-size-map: () !default;
$font-size-map: map.merge(
  (
    base: 0.875rem,
    primary: 1.15em,
    secondary: 0.75em
  ),
  $font-size-map
);

:root {
  @include define-preset-values('font-size', $font-size-map);
}

$vxp-line-height: 1.5 !default;
$vxp-line-height-secondary: 1 !default;

$line-height-map: () !default;
$line-height-map: map.merge(
  (
    base: 1.5,
    secondary: 1
  ),
  $line-height-map
);

:root {
  @include define-preset-values('line-height', $line-height-map);
}

$vxp-border-width: 1px !default;
$vxp-border-style: solid !default;
$vxp-border-appearance: $vxp-border-width $vxp-border-style !default;
$vxp-border-base: $vxp-border-appearance $vxp-color-border !default;

$border-width: 1px !default;
$border-style: solid !default;
$border-appearance: get-css-var('border-width') get-css-var('border-style') !default;

:root {
  @include define-css-var('border-width', $border-width);
  @include define-css-var('border-style', $border-style);
  @include define-css-var('border-appearance', $border-appearance);

  @each $name in map.keys($border-color-map) {
    @include define-css-var(
      ('border', $name),
      get-css-var('border-appearance') get-css-var('border-color', $name)
    );
  }
}

$vxp-border-radius-base: 4px !default;
$vxp-border-radius-large: 6px !default;
$vxp-border-radius-small: 2px !default;

$border-radius-map: () !default;
$border-radius-map: map.merge(
  (
    base: 4px,
    large: 6px,
    small: 2px
  ),
  $border-radius-map
);

:root {
  @include define-preset-values('border-radius', $border-radius-map);
}

$vxp-box-shadow-x-offset: 0 !default;
$vxp-box-shadow-y-offset: 0 !default;
$vxp-box-shadow-blur: 4px !default;
$vxp-box-shadow-appearance: $vxp-box-shadow-x-offset $vxp-box-shadow-y-offset $vxp-box-shadow-blur !default;
$vxp-box-shadow-border-appearance: 0 0 0 1px !default;
$vxp-box-shadow-fouced-appearance: 0 0 0 2px !default;
$vxp-box-shadow-base: $vxp-box-shadow-appearance $vxp-color-border !default;

$box-shadow-x: 0 !default;
$box-shadow-y: 0 !default;
$box-shadow-blur: 4px !default;
$box-shadow-appearance: get-css-var('box-shadow-x') get-css-var('box-shadow-y')
  get-css-var('box-shadow-blur') !default;
$box-shadow-base: get-css-var('box-shadow-appearance') get-css-var('border-color-base') !default;

$box-shadow-border: 0 0 0 1px !default;
$box-shadow-fouced: 0 0 2px 2px !default;

:root {
  @include define-css-var('box-shadow-x', $box-shadow-x);
  @include define-css-var('box-shadow-y', $box-shadow-y);
  @include define-css-var('box-shadow-blur', $box-shadow-blur);
  @include define-css-var('box-shadow-appearance', $box-shadow-appearance);
  @include define-css-var('box-shadow-base', $box-shadow-base);

  @include define-css-var('box-shadow-border', $box-shadow-border);
  @include define-css-var('box-shadow-fouced', $box-shadow-fouced);
}

$vxp-transition-duration: 250ms !default;
$vxp-transition-timing-function: ease !default;
$vxp-transition-base: $vxp-transition-duration $vxp-transition-timing-function !default;
$vxp-transition-color-base: color $vxp-transition-base !default;
$vxp-transition-background-base: background-color $vxp-transition-base !default;
$vxp-transition-border-base: border-color $vxp-transition-base !default;
$vxp-transition-box-shadow-base: box-shadow $vxp-transition-base !default;
$vxp-transition-opacity-base: opacity $vxp-transition-base !default;
$vxp-transition-transform-base: transform $vxp-transition-base !default;

$transition-duration: 250ms !default;
$transition-timing: ease !default;
$transition-base: get-css-var('transition-duration') get-css-var('transition-timing') !default;

$transition-map: () !default;
$transition-map: map.merge(
  (
    color: color get-css-var('transition-base'),
    background: background-color get-css-var('transition-base'),
    border: border-color get-css-var('transition-base'),
    box-shadow: box-shadow get-css-var('transition-base'),
    opacity: opacity get-css-var('transition-base'),
    transform: transform get-css-var('transition-base')
  ),
  $transition-map
);

:root {
  @include define-css-var('transition-duration', $transition-duration);
  @include define-css-var('transition-timing', $transition-timing);
  @include define-css-var('transition-base', $transition-base);

  @include define-preset-values('transition', $transition-map);
}

$vxp-z-index-popper: 1000 !default;
$vxp-z-index-masker: 1500 !default;
$vxp-z-index-popup: 2000 !default;

$z-index-map: () !default;
$z-index-map: map.merge(
  (
    popper: 1000,
    masker: 1500,
    popup: 2000
  ),
  $z-index-map
);

:root {
  @include define-preset-values('z-index', $z-index-map);
}

$vxp-break-point-sm: 576px !default;
$vxp-break-point-md: 768px !default;
$vxp-break-point-lg: 992px !default;
$vxp-break-point-xl: 1200px !default;
$vxp-break-point-xxl: 1600px !default;
$vxp-break-point-map: (
  xs: (
    max-width: $vxp-break-point-sm - 0.02px
  ),
  sm: (
    min-width: $vxp-break-point-sm
  ),
  md: (
    min-width: $vxp-break-point-md
  ),
  lg: (
    min-width: $vxp-break-point-lg
  ),
  xl: (
    min-width: $vxp-break-point-xl
  ),
  xxl: (
    min-width: $vxp-break-point-xxl
  )
);

$break-point-map: () !default;
$break-point-map: map.merge(
  (
    xs: (
      max-width: $vxp-break-point-sm - 0.02px
    ),
    sm: (
      min-width: $vxp-break-point-sm
    ),
    md: (
      min-width: $vxp-break-point-md
    ),
    lg: (
      min-width: $vxp-break-point-lg
    ),
    xl: (
      min-width: $vxp-break-point-xl
    ),
    xxl: (
      min-width: $vxp-break-point-xxl
    )
  ),
  $break-point-map
);

:root {
  @include define-preset-values('break-point', $break-point-map, true);
}
