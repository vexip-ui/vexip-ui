@use 'sass:map';

@use '../design' as *;
@use './icon.scss';

$states: success, error, warning;

$input: () !default;
$input: map.merge(
  (
    color-bg: get-css-var('fill-color-base'),
    color-bg-disabled: get-css-var('fill-color-humble'),
    color-border: get-css-var('border-color-base'),
    color-border-hover: get-css-var('color-primary-light-1'),
    color-border-focus: get-css-var('input-color-border-hover'),
    color-shadow-focus: get-css-var('color-primary-light-8'),
    shadow-focus: get-css-var('box-shadow-fouced') get-css-var('input-color-shadow-focus'),
    color-placeholder: get-css-var('content-color-placeholder'),
    color-control: get-css-var('content-color-base'),
    control-color-disabled: get-css-var('content-color-disabled'),
    color-icon: get-css-var('content-color-secondary'),
    color-icon-hover: get-css-var('color-primary-base'),
    icon-color-disabled: get-css-var('input-control-color-disabled'),
    color-bg-before: get-css-var('fill-color-background'),
    color-bg-after: get-css-var('fill-color-background'),
    line-height: get-css-var('line-height-base'),
    border: get-css-var('border-appearance') get-css-var('input-color-border'),
    border-radius: get-css-var('border-radius-base'),
    font-size-count: get-css-var('font-size-secondary'),
    line-height-count: get-css-var('line-height-secondary'),
    horizontal-padding: 0.6em,
    small-height: 1.7em,
    small-padding: 0.1em get-css-var('input-horizontal-padding'),
    default-height: 2.1em,
    default-padding: 0.3em get-css-var('input-horizontal-padding'),
    large-height: 2.5em,
    large-padding: 0.5em get-css-var('input-horizontal-padding')
  ),
  $input
);

@mixin define-input-style($style-map) {
  @include define-preset-style('input', $style-map);
}

@mixin handler {
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
  background-color: get-css-var('input-color-bg');
  border: get-css-var('input-border');
  border-radius: get-css-var('input-border-radius');
  outline: 0;
  transition:
    get-css-var('transition-background'),
    get-css-var('transition-border'),
    get-css-var('transition-box-shadow');

  &:hover {
    border-color: get-css-var('input-color-border-hover');
  }

  &:focus,
  &--focused {
    z-index: 2;
    border-color: get-css-var('input-color-border-focus');
    box-shadow: get-css-var('input-shadow-focus');
  }

  @each $state in $states {
    &--#{$state} {
      @include define-input-style(
        (
          color-border: 'color' $state 'light-1',
          color-border-hover: 'color' $state 'light-1',
          color-shadow-focus: 'color' $state 'light-8'
        )
      );
    }
  }

  &--disabled {
    cursor: not-allowed;
    background-color: get-css-var('input-color-bg-disabled');

    &,
    &:hover,
    &:focus {
      border-color: get-css-var('border-color-base');
      box-shadow: none;
    }

    %disabled-item {
      pointer-events: none;
      cursor: not-allowed;

      &,
      .vxp-icon {
        color: get-css-var('input-control-color-disabled');
      }
    }
  }

  &--disabled#{&}--focused {
    border-color: get-css-var('border-color-base');
    box-shadow: none;
  }

  &__control {
    width: 100%;
    height: get-css-var('input-default-height');
    padding: get-css-var('input-default-padding');
    font-size: inherit;
    line-height: get-css-var('input-line-height');
    color: get-css-var('input-color-control');
    background-color: transparent;
    border: 0;
    border-radius: get-css-var('input-border-radius');
    outline: 0;

    &:disabled {
      cursor: not-allowed;
    }

    &::placeholder {
      color: get-css-var('input-color-placeholder');
    }

    @extend %disabled-item;
  }

  &--small &__control {
    height: get-css-var('input-small-height');
    padding: get-css-var('input-small-padding');
  }

  &--large &__control {
    height: get-css-var('input-large-height');
    padding: get-css-var('input-large-padding');
  }

  @at-root {
    %icon {
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 2em;
      height: 100%;
      user-select: none;

      &,
      .vxp-icon {
        color: get-css-var('input-color-icon');
      }

      @extend %disabled-item;
    }
  }

  &__icon {
    &--prefix {
      @extend %icon;

      left: 0;
    }

    &--suffix {
      @extend %icon;

      right: 0;
    }
  }

  &__clear {
    @extend %icon;

    right: 0;
    cursor: pointer;
  }
}

.vxp-input {
  &-vars {
    @include define-preset-values('input', $input);
  }

  $self: &;
  $wrapper: #{&}-wrapper;
  $radius: get-css-var('input-border-radius');

  &-wrapper {
    @include basis;

    position: relative;
    display: inline-flex;
    align-items: center;
    width: 100%;
  }

  @include basis;
  @include handler;

  &-wrapper & {
    border-radius: 0;
  }

  &-wrapper--before-only & {
    border-radius: 0 $radius $radius 0;
  }

  &-wrapper--after-only & {
    border-radius: $radius 0 0 $radius;
  }

  // &__overlay {
  //   display: flex;
  //   flex-wrap: wrap;
  //   align-items: center;
  //   width: 100%;
  //   overflow: hidden;
  // }

  &__icon {
    &--password {
      position: absolute;
      right: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 2em;
      height: 100%;
      cursor: pointer;
      user-select: none;

      &,
      .vxp-icon {
        color: get-css-var('input-color-icon');
      }

      @extend %disabled-item;
    }
  }

  &__count {
    position: absolute;
    top: 50%;
    right: 7px;
    margin-top: -1px;
    font-size: get-css-var('input-font-size-count');
    line-height: 1;
    pointer-events: none;
    user-select: none;
    transform: translateY(-50%);
  }

  &__before,
  &__after {
    position: relative;
    display: flex;
    align-items: center;
    height: calc(get-css-var('input-default-height') + get-css-var('border-width') * 2);
    padding: 0 get-css-var('input-horizontal-padding');
    border: get-css-var('input-border');

    #{$wrapper}--small & {
      height: calc(get-css-var('input-small-height') + get-css-var('border-width') * 2);
    }

    #{$wrapper}--large & {
      height: calc(get-css-var('input-large-height') + get-css-var('border-width') * 2);
    }

    #{$self} {
      padding: 0;
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;

      &__control {
        padding: 0 !important;
      }

      &__icon {
        &--prefix,
        &--suffix {
          width: auto;
        }
      }
    }
  }

  &__before {
    background-color: get-css-var('input-color-bg-before');
    border-right: 0;
    border-radius: $radius 0 0 $radius;
  }

  &__after {
    background-color: get-css-var('input-color-bg-after');
    border-left: 0;
    border-radius: 0 $radius $radius 0;
  }
}
