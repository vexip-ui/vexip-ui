@use 'sass:color';
@use 'sass:map';

@use './design' as *;
@use './icon.scss';

$button: () !default;
$button: map.merge(
  (
    color: get-css-var('content-color-base'),
    color-hover: get-css-var('color-primary-light-2'),
    color-focus: get-css-var('color-primary-light-2'),
    color-active: get-css-var('color-primary-dark-1'),
    color-disabled: get-css-var('content-color-disabled'),
    bg-color: get-css-var('fill-color-base'),
    bg-color-hover: get-css-var('button-bg-color'),
    bg-color-focus: get-css-var('button-bg-color'),
    bg-color-active: get-css-var('button-bg-color'),
    bg-color-disabled: get-css-var('fill-color-background'),
    b-color: get-css-var('border-color-base'),
    b-color-hover: get-css-var('color-primary-light-2'),
    b-color-focus: get-css-var('color-primary-light-2'),
    b-color-active: get-css-var('color-primary-dark-1'),
    b-color-disabled: get-css-var('border-color-light-1'),
    color-ghost: rgba(#fff, 0.8),
    color-hover-ghost: get-css-var('color-primary-base'),
    color-focus-ghost: get-css-var('color-primary-base'),
    color-active-ghost: get-css-var('color-primary-base'),
    color-disabled-ghost: get-css-var('content-color-disabled'),
    bg-color-ghost: transparent,
    bg-color-hover-ghost: get-css-var('button-bg-color-ghost'),
    bg-color-focus-ghost: get-css-var('button-bg-color-ghost'),
    bg-color-active-ghost: get-css-var('button-bg-color-ghost'),
    bg-color-disabled-ghost: get-css-var('button-bg-color-ghost'),
    b-color-ghost: rgba(#fff, 0.6),
    b-color-hover-ghost: get-css-var('color-primary-base'),
    b-color-active-ghost: get-css-var('color-primary-base'),
    b-color-disabled-ghost: get-css-var('content-color-disabled'),
    color-typed: get-css-var('color-white'),
    color-hover-typed: get-css-var('button-color-typed'),
    color-focus-typed: get-css-var('button-color-typed'),
    color-active-typed: get-css-var('button-color-typed'),
    color-disabled-typed: get-css-var('content-color-disabled'),
    bg-color-disabled-typed: get-css-var('fill-color-background'),
    b-color-disabled-typed: get-css-var('border-color-light-1'),
    color-focus-typed-simple: get-css-var('color-white'),
    color-active-typed-simple: get-css-var('color-white'),
    color-disabled-typed-simple: get-css-var('content-color-disabled'),
    bg-color-disabled-typed-simple: get-css-var('fill-color-background'),
    b-color-disabled-typed-simple: get-css-var('border-color-light-1'),
    color-disabled-typed-ghost: get-css-var('button-color-disabled-ghost'),
    bg-color-typed-ghost: transparent,
    bg-color-hover-typed-ghost: rgba($color-white, 0.1),
    bg-color-focus-typed-ghost: rgba($color-white, 0.1),
    bg-color-active-typed-ghost: rgba($color-white, 0.2),
    bg-color-disabled-typed-ghost: get-css-var('button-bg-color-typed-ghost'),
    b-color-disabled-typed-ghost: get-css-var('content-color-disabled'),
    border: get-css-var('border-shape') get-css-var('button-b-color'),
    radius: get-css-var('radius-base'),
    pulse-s-color: get-css-var('color-primary-base'),
    pulse-opacity: 60%,
    pulse-size: 6px,
    pulse-duration: 800ms,
    pulse-timing: ease,
    height: 32px,
    v-padding: 0,
    h-padding: 14px,
    padding: get-css-var('button-v-padding') get-css-var('button-h-padding'),
    font-size: get-css-var('font-size-base'),
    series-span: 8px,
    icon-span: 6px,
    d-color-typed: rgba($color-white, 50%)
  ),
  $button
);

.vxp-button {
  &-vars {
    @include define-preset-values('button', $button);
  }

  $self: &;

  @mixin disabled($selector) {
    @at-root {
      #{$self}--disabled#{$selector} {
        &,
        &:hover,
        &:active,
        &.active {
          @content;
        }
      }
    }
  }

  @mixin define-button-style($style-map) {
    @include define-preset-style('button', $style-map);
  }

  @include basis;

  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: get-css-var('button-height');
  padding: get-css-var('button-padding');
  font-weight: 400;
  line-height: 1;
  color: get-css-var('button-color');
  white-space: nowrap;
  cursor: pointer;
  user-select: none;
  background-color: get-css-var('button-bg-color');
  border: get-css-var('button-border');
  border-radius: get-css-var('button-radius');
  outline: 0;
  transition:
    get-css-var('transition-color'),
    get-css-var('transition-background'),
    get-css-var('transition-border'),
    get-css-var('transition-shadow');

  &:hover {
    color: get-css-var('button-color-hover');
    background-color: get-css-var('button-bg-color-hover');
    border-color: get-css-var('button-b-color-hover');
    outline: 0;
  }

  &:focus {
    color: get-css-var('button-color-focus');
    background-color: get-css-var('button-bg-color-focus');
    border-color: get-css-var('button-b-color-focus');
    outline: 0;
  }

  &:active {
    color: get-css-var('button-color-active');
    background-color: get-css-var('button-bg-color-active');
    border-color: get-css-var('button-b-color-active');
  }

  @include disabled('') {
    color: get-css-var('button-color-disabled');
    cursor: not-allowed;
    background-color: get-css-var('button-bg-color-disabled');
    border-color: get-css-var('button-b-color-disabled');
  }

  & + & {
    margin-left: get-css-var('button-series-span');
  }

  &--small {
    @include define-preset-values('button', (
      height: 24px,
      h-padding: 10px
    ));
  }

  &--large {
    @include define-preset-values('button', (
      height: 40px,
      h-padding: 20px
    ));
  }

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: block;
    pointer-events: none;
    content: '';
    background-color: transparent;
    border-radius: inherit;
    animation-duration: get-css-var('button-pulse-duration');
    animation-timing-function: get-css-var('button-pulse-timing');
    animation-iteration-count: 1;
  }

  &--pulsing::after {
    animation-name: vxp-button-pulse, vxp-button-pulse-opacity;

    @keyframes vxp-button-pulse {
      0% {
        box-shadow: 0 0 1px 0 get-css-var('button-pulse-s-color');
      }

      100% {
        box-shadow: 0 0 1px get-css-var('button-pulse-size') get-css-var('button-pulse-s-color');
      }
    }

    @keyframes vxp-button-pulse-opacity {
      0% {
        opacity: get-css-var('button-pulse-opacity');
      }

      100% {
        opacity: 0%;
      }
    }
  }

  &--dashed {
    border-style: dashed;

    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: transparent;
    }
  }

  &--text {
    border-color: transparent;

    &::after {
      display: none;
    }

    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: transparent;
      border-color: transparent;
    }
  }

  &--ghost {
    @include define-button-style((
      bg-color: 'button-bg-color-ghost',
      b-color: 'button-b-color-ghost',
      color: 'button-color-ghost',
      bg-color-hover: 'button-bg-color-hover-ghost',
      b-color-hover: 'button-b-color-hover-ghost',
      color-hover: 'button-color-hover-ghost',
      bg-color-focus: 'button-bg-color-focus-ghost',
      b-color-focus: 'button-b-color-focus-ghost',
      color-focus: 'button-color-focus-ghost',
      bg-color-active: 'button-bg-color-active-ghost',
      b-color-active: 'button-b-color-active-ghost',
      color-active: 'button-color-active-ghost',
      bg-color-disabled: 'button-bg-color-disabled-ghost',
      b-color-disabled: 'button-b-color-disabled-ghost',
      color-disabled: 'button-color-disabled-ghost'
    ));
  }

  &--text#{&}--ghost {
    border-color: transparent;
  }

  $d-color: get-css-var('button-d-color-typed');

  @each $type in $types {
    @at-root {
      &--#{$type} {
        @include define-button-style((
          color: 'button-color-typed',
          color-hover: 'button-color-hover-typed',
          color-focus: 'button-color-focus-typed',
          color-active: 'button-color-active-typed',
          color-disabled: 'button-color-disabled-typed',
          bg-color: 'color' $type 'base',
          bg-color-hover: 'color' $type 'light-2',
          bg-color-focus: 'color' $type 'light-2',
          bg-color-active: 'color' $type 'dark-1',
          bg-color-disabled: 'button-bg-color-disabled-typed',
          b-color: 'color' $type 'base',
          b-color-hover: 'color' $type 'light-2',
          b-color-focus: 'color' $type 'light-2',
          b-color-active: 'color' $type 'dark-1',
          b-color-disabled: 'button-b-color-disabled-typed',
          pulse-s-color: 'color' $type 'dark-1'
        ));
      }

      &--#{$type}#{&}--simple {
        @include define-button-style((
          color: 'color' $type 'base',
          color-hover: 'color' $type 'base',
          color-focus: 'button-color-focus-typed-simple',
          color-active: 'button-color-active-typed-simple',
          color-disabled: 'button-color-disabled-typed-simple',
          bg-color: 'color' $type 'opacity-8',
          bg-color-hover: 'color' $type 'opacity-7',
          bg-color-focus: 'color' $type 'opacity-1',
          bg-color-active: 'color' $type 'opacity-1',
          bg-color-disabled: 'button-bg-color-disabled-typed-simple',
          b-color: 'color' $type 'opacity-4',
          b-color-hover: 'color' $type 'opacity-4',
          b-color-focus: 'color' $type 'opacity-3',
          b-color-active: 'color' $type 'opacity-3',
          b-color-disabled: 'button-b-color-disabled-typed-simple'
        ));
      }

      &--#{$type}#{&}--ghost {
        @include define-button-style((
          color: 'color' $type 'base',
          color-hover: 'color' $type 'base',
          color-focus: 'color' $type 'base',
          color-active: 'color' $type 'base',
          color-disabled: 'button-color-disabled-typed-ghost',
          bg-color: 'button-bg-color-typed-ghost',
          bg-color-hover: 'button-bg-color-hover-typed-ghost',
          bg-color-focus: 'button-bg-color-focus-typed-ghost',
          bg-color-active: 'button-bg-color-active-typed-ghost',
          bg-color-disabled: 'button-bg-color-disabled-typed-ghost',
          b-color-disabled: 'button-b-color-disabled-typed-ghost'
        ));
      }

      &--#{$type}#{&}--text,
      &--#{$type}#{&}--dashed {
        @include define-button-style((
          color: 'color' $type 'base',
          color-hover: 'color' $type 'light-2',
          color-focus: 'color' $type 'light-2',
          color-active: 'color' $type 'dark-1'
        ));
      }

      &-group &--#{$type} {
        &:first-child {
          border-right-color: $d-color;
        }

        &:last-child {
          border-left-color: $d-color;
        }

        &:not(:first-child):not(:last-child) {
          border-right-color: $d-color;
          border-left-color: $d-color;
        }
      }
    }
  }

  &--text#{&}--disabled {
    &,
    &:hover,
    &:active,
    &.active {
      background-color: transparent;
      border-color: transparent;
    }
  }

  &--circle {
    border-radius: get-css-var('button-height');
  }

  &--loading {
    position: relative;
    pointer-events: none;
    cursor: default;

    &::before {
      position: absolute;
      top: -1px;
      right: -1px;
      bottom: -1px;
      left: -1px;
      z-index: 1;
      pointer-events: none;
      content: '';
      background-color: get-css-var('color-white');
      border-radius: inherit;
      opacity: 25%;
      transition: get-css-var('transition-opacity');
    }
  }

  &__icon {
    display: flex;
    align-items: center;
    margin-right: get-css-var('button-icon-span');
  }

  &--icon-only {
    width: get-css-var('button-height');
    padding: 0;
  }

  &--icon-only &__icon {
    margin: 0;
  }

  &--icon-only#{&}--small {
    width: get-css-var('button-height');
  }

  &--icon-only#{&}--large {
    width: get-css-var('button-height');
  }

  @at-root {
    &-group {
      display: inline-flex;
      align-items: center;

      #{$self} + #{$self} {
        margin-left: 0;
      }

      #{$self} {
        border-radius: 0;

        &:hover,
        &:focus {
          z-index: 1;
        }

        &:active,
        &--active {
          z-index: 2;
        }

        &:first-child {
          border-radius: get-css-var('button-radius') 0 0 get-css-var('button-radius');
        }

        &:last-child {
          border-radius: 0 get-css-var('button-radius') get-css-var('button-radius') 0;
        }

        &:not(:last-child) {
          margin-right: -1px;
        }
      }

      &--circle {
        #{$self} {
          &:first-child {
            border-radius: get-css-var('button-height') 0 0 get-css-var('button-height');
          }

          &:last-child {
            border-radius: 0 get-css-var('button-height') get-css-var('button-height') 0;
          }
        }
      }
    }
  }
}
