@use 'sass:color';
@use 'sass:list';
@use 'sass:map';

@use '../design' as *;
@use './icon.scss';

$button: () !default;
$button: map.merge(
  (
    color: get-css-var('content-color-base'),
    color-hover: get-css-var('color-primary-light-2'),
    color-focus: get-css-var('color-primary-light-2'),
    color-active: get-css-var('color-primary-dark-1'),
    color-disabled: get-css-var('content-color-disabled'),
    color-bg: get-css-var('fill-color-base'),
    color-bg-hover: get-css-var('button-color-bg'),
    color-bg-focus: get-css-var('button-color-bg'),
    color-bg-active: get-css-var('button-color-bg'),
    color-bg-disabled: get-css-var('fill-color-background'),
    color-border: get-css-var('border-color-base'),
    color-border-hover: get-css-var('color-primary-light-2'),
    color-border-focus: get-css-var('color-primary-light-2'),
    color-border-active: get-css-var('color-primary-dark-1'),
    color-border-disabled: get-css-var('border-color-light-1'),
    color-ghost: get-css-var('content-color-reverse'),
    color-hover-ghost: get-css-var('color-primary-base'),
    color-focus-ghost: get-css-var('color-primary-base'),
    color-active-ghost: get-css-var('color-primary-base'),
    color-disabled-ghost: get-css-var('content-color-disabled'),
    color-bg-ghost: transparent,
    color-bg-hover-ghost: get-css-var('button-color-bg-ghost'),
    color-bg-focus-ghost: get-css-var('button-color-bg-ghost'),
    color-bg-active-ghost: get-css-var('button-color-bg-ghost'),
    color-bg-disabled-ghost: get-css-var('button-color-bg-ghost'),
    color-border-ghost: get-css-var('fill-color-base'),
    color-border-hover-ghost: get-css-var('color-primary-base'),
    color-border-active-ghost: get-css-var('color-primary-base'),
    color-border-disabled-ghost: get-css-var('content-color-disabled'),
    color-types: get-css-var('content-color-reverse'),
    color-hover-types: get-css-var('button-color-types'),
    color-focus-types: get-css-var('button-color-types'),
    color-active-types: get-css-var('button-color-types'),
    color-disabled-types: get-css-var('content-color-disabled'),
    color-bg-disabled-types: get-css-var('fill-color-background'),
    color-border-disabled-types: get-css-var('border-color-light-1'),
    color-active-types-simple: get-css-var('content-color-reverse'),
    color-disabled-types-simple: get-css-var('content-color-disabled'),
    color-bg-disabled-types-simple: get-css-var('fill-color-background'),
    color-border-disabled-types-simple: get-css-var('border-color-light-1'),
    color-disabled-types-ghost: get-css-var('button-color-disabled-ghost'),
    color-bg-types-ghost: transparent,
    color-bg-hover-types-ghost: rgba($color-white, 0.1),
    color-bg-focus-types-ghost: rgba($color-white, 0.1),
    color-bg-active-types-ghost: rgba($color-white, 0.2),
    color-bg-disabled-types-ghost: get-css-var('button-color-bg-types-ghost'),
    color-border-disabled-types-ghost: get-css-var('content-color-disabled'),
    color-pulse: get-css-var('color-primary-light-2'),
    border: get-css-var('border-appearance') get-css-var('button-color-border'),
    border-radius: get-css-var('border-radius-base'),
    pulsing-size: 8px,
    pulsing-showy-size: calc(get-css-var('button-pulsing-size') * 0.75),
    pulsing-duration: 800ms,
    pulsing-timing: ease,
    small-height: 1.9em,
    small-padding: 0 0.8em,
    default-height: 2.2em,
    default-padding: 0 1em,
    large-height: 2.5em,
    large-padding: 0 1.4em,
    series-span: 0.6em
  ),
  $button
);

.vxp-button {
  @include define-preset-values('button', $button);

  $button: &;

  @mixin disabled($selector) {
    @at-root {
      #{$button}--disabled#{$selector} {
        &,
        &:hover,
        &:active,
        &.active {
          @content;
        }
      }
    }
  }

  @mixin define-button-style($style-map) {
    @each $name in map.keys($style-map) {
      $style: map.get($style-map, $name);

      @if list.length($style) != 0 {
        @include define-css-var(('button', $name), get-css-var($style...));
      }
    }
  }

  @include basis;

  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  height: get-css-var('button-default-height');
  padding: get-css-var('button-default-padding');
  font-weight: 400;
  line-height: 1;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  background-color: get-css-var('button-color-bg');
  border: get-css-var('button-border');
  border-radius: get-css-var('button-border-radius');
  outline: 0;
  transition:
    get-css-var('transition-color'),
    get-css-var('transition-background'),
    get-css-var('transition-border'),
    get-css-var('transition-box-shadow');

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: block;
    pointer-events: none;
    content: '';
    background-color: transparent;
    border-radius: inherit;
    opacity: 40%;
    animation-timing-function: get-css-var('button-pulsing-timing');
    animation-fill-mode: forwards;
  }

  &,
  .vxp-icon {
    color: get-css-var('button-color');
  }

  &:hover {
    background-color: get-css-var('button-color-bg-hover');
    border-color: get-css-var('button-color-border-hover');
    outline: 0;

    &,
    .vxp-icon {
      color: get-css-var('button-color-hover');
    }
  }

  &:focus {
    background-color: get-css-var('button-color-bg-focus');
    border-color: get-css-var('button-color-border-focus');
    outline: 0;

    &,
    .vxp-icon {
      color: get-css-var('button-color-focus');
    }
  }

  &:active {
    background-color: get-css-var('button-color-bg-active');
    border-color: get-css-var('button-color-border-active');

    &,
    .vxp-icon {
      color: get-css-var('button-color-active');
    }
  }

  @include disabled('') {
    cursor: not-allowed;
    background-color: get-css-var('button-color-bg-disabled');
    border-color: get-css-var('button-color-border-disabled');

    &,
    .vxp-icon {
      color: get-css-var('button-color-disabled');
    }
  }

  & + & {
    margin-left: get-css-var('button-series-span');
  }

  &--small {
    height: get-css-var('button-small-height');
    padding: get-css-var('button-small-padding');
  }

  &--large {
    height: get-css-var('button-large-height');
    padding: get-css-var('button-large-padding');
  }

  &--pulsing::after {
    animation: vxp-button-pulse get-css-var('button-pulsing-duration');

    @keyframes vxp-button-pulse {
      60% {
        box-shadow: 0 0 0 get-css-var('button-pulsing-showy-size') get-css-var('button-color-pulse');
      }

      100% {
        box-shadow: 0 0 0 get-css-var('button-pulsing-size') get-css-var('button-color-pulse');
        opacity: 0%;
      }
    }
  }

  &--dashed {
    border-style: dashed;
  }

  &--text {
    background-color: transparent;
    border-color: transparent;

    &::after {
      display: none;
    }

    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: transparent;
      border-color: transparent;
    }
  }

  &--ghost {
    @include define-button-style((
      color-bg: 'button-color-bg-ghost',
      color-border: 'button-color-border-ghost',
      color: 'button-color-ghost',
      color-bg-hover: 'button-color-bg-hover-ghost',
      color-border-hover: 'button-color-border-hover-ghost',
      color-hover: 'button-color-hover-ghost',
      color-bg-focus: 'button-color-bg-focus-ghost',
      color-border-focus: 'button-color-border-focus-ghost',
      color-focus: 'button-color-focus-ghost',
      color-bg-active: 'button-color-bg-active-ghost',
      color-border-active: 'button-color-border-active-ghost',
      color-active: 'button-color-active-ghost',
      color-bg-disabled: 'button-color-bg-disabled-ghost',
      color-border-disabled: 'button-color-border-disabled-ghost',
      color-disabled: 'button-color-disabled-ghost',
    ));
  }

  &--text#{&}--ghost {
    border-color: transparent;
  }

  @each $type in $types {
    @at-root {
      &--#{$type} {
        @include define-button-style((
          color-bg: 'color' $type 'base',
          color-border: 'color' $type 'base',
          color: 'button-color-types',
          color-bg-hover: 'color' $type 'light-2',
          color-border-hover: 'color' $type 'light-2',
          color-hover: 'button-color-hover-types',
          color-bg-focus: 'color' $type 'light-2',
          color-border-focus: 'color' $type 'light-2',
          color-focus: 'button-color-hover-types',
          color-bg-active: 'color' $type 'dark-1',
          color-border-active: 'color' $type 'dark-1',
          color-active: 'button-color-active-types',
          color-bg-disabled: 'button-color-bg-disabled-types',
          color-border-disabled: 'button-color-border-disabled-types',
          color-disabled: 'button-color-disabled-types',
        ));
      }

      &--#{$type}#{&}--pulsing::after {
        @include define-css-var('button-color-pulse', get-css-var('color', $type, 'dark-1'));
      }

      &--#{$type}#{&}--simple {
        @include define-button-style((
          color-bg: 'color' $type 'light-8',
          color-border: 'color' $type 'light-4',
          color: 'color' $type 'base',
          color-bg-hover: 'color' $type 'light-7',
          color-border-hover: 'color' $type 'light-4',
          color-hover: 'color' $type 'base',
          color-bg-focus: 'color' $type 'light-1',
          color-border-focus: 'color' $type 'light-3',
          color-focus: 'button-color-active-types-simple',
          color-bg-active: 'color' $type 'light-1',
          color-border-active: 'color' $type 'light-3',
          color-active: 'button-color-active-types-simple',
          color-bg-disabled: 'button-color-bg-disabled-types-simple',
          color-border-disabled: 'button-color-border-disabled-types-simple',
          color-disabled: 'button-color-disabled-types-simple',
        ));
      }

      &--#{$type}#{&}--ghost {
        @include define-button-style((
          color-bg: 'button-color-bg-types-ghost',
          color: 'color' $type 'base',
          color-bg-hover: 'button-color-bg-hover-types-ghost',
          color-border-hover: 'color' $type 'light-2',
          color-hover: 'color' $type 'base',
          color-bg-focus: 'button-color-bg-focus-types-ghost',
          color-border-focus: 'color' $type 'light-2',
          color-focus: 'color' $type 'base',
          color-bg-active: 'button-color-bg-active-types-ghost',
          color-border-active: 'color' $type 'dark-1',
          color-active: 'color' $type 'base',
          color-bg-disabled: 'button-color-bg-disabled-types-ghost',
          color-border-disabled: 'button-color-border-disabled-types-ghost',
          color-disabled: 'button-color-disabled-types-ghost',
        ));
      }

      &-group &--#{$type} {
        &:first-child {
          border-right-color: rgba($vxp-color-white, 0.5);
        }

        &:last-child {
          border-left-color: rgba($vxp-color-white, 0.5);
        }

        &:not(:first-child):not(:last-child) {
          border-right-color: rgba($vxp-color-white, 0.5);
          border-left-color: rgba($vxp-color-white, 0.5);
        }
      }
    }
  }

  &--text#{&}--disabled {
    &,
    &:hover,
    &:active,
    &.active {
      background-color: transparent;
      border-color: transparent;
    }
  }

  &--circle {
    border-radius: get-css-var('button-large-height');
  }

  &--loading {
    position: relative;
    pointer-events: none;

    &::before {
      position: absolute;
      top: -1px;
      right: -1px;
      bottom: -1px;
      left: -1px;
      z-index: 1;
      pointer-events: none;
      content: '';
      background-color: get-css-var('color-white');
      border-radius: inherit;
      opacity: 25%;
      transition: get-css-var('transition-opacity');
    }
  }

  &__icon {
    display: flex;
    align-items: center;
    margin-right: 3px;
  }

  &--icon-only {
    width: get-css-var('button-default-height');
    padding: 0;
  }

  &--icon-only &__icon {
    margin: 0;
  }

  &--icon-only#{&}--small {
    width: get-css-var('button-small-height');
  }

  &--icon-only#{&}--large {
    width: get-css-var('button-large-height');
  }

  @at-root {
    &-group {
      display: inline-flex;
      align-items: center;

      #{$button} + #{$button} {
        margin-left: 0;
      }

      #{$button} {
        border-radius: 0;

        &:hover,
        &:focus {
          z-index: 1;
        }

        &:active,
        &--active {
          z-index: 2;
        }

        &:first-child {
          border-radius: get-css-var('border-radius') 0 0 get-css-var('border-radius');
        }

        &:last-child {
          border-radius: 0 get-css-var('border-radius') get-css-var('border-radius') 0;
        }

        &:not(:last-child) {
          margin-right: -1px;
        }
      }

      &--circle {
        #{$button} {
          &:first-child {
            border-radius: get-css-var('button-large-height') 0 0 get-css-var('button-large-height');
          }

          &:last-child {
            border-radius: 0 get-css-var('button-large-height') get-css-var('button-large-height') 0;
          }
        }
      }
    }
  }
}
