@use 'sass:color';
@use 'sass:list';
@use 'sass:map';

@use '../design' as *;
@use './icon.scss';

.vxp-linker {
  @include basis;

  position: relative;
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  vertical-align: inherit;
  cursor: pointer;
  transition: get-css-var('transition-color');

  & + & {
    margin-left: 10px;
  }

  &:hover {
    text-decoration: none;

    &,
    .vxp-icon {
      color: $vxp-color-primary-light-1;
    }
  }

  &--underline {
    &::after {
      position: absolute;
      right: 0;
      bottom: 0;
      left: 0;
      height: 1px;
      content: '';
      background-color: $vxp-color-primary-light-1;
      opacity: 0%;
      transition: get-css-var('transition-opacity');
    }

    &:hover::after {
      opacity: 100%;
    }
  }

  &--disabled {
    cursor: not-allowed;

    &,
    &:hover {
      &,
      .vxp-icon {
        color: $vxp-color-content-disabled;
      }
    }

    &:hover::after {
      opacity: 0%;
    }
  }

  &__icon {
    margin-right: 3px;
  }

  $types: (
    primary: $vxp-color-primary $vxp-color-primary-light-2,
    success: $vxp-color-success $vxp-color-success-light-2,
    error: $vxp-color-error $vxp-color-error-light-2,
    warning: $vxp-color-warning $vxp-color-warning-light-2,
    info: $vxp-color-info $vxp-color-info-light-2
  );

  @each $type in map-keys($types) {
    $colors: map.get($types, $type);
    $color-base: list.nth($colors, 1);
    $color-hover: list.nth($colors, 2);

    &--#{$type} {
      color: $color-base;

      &:hover {
        &,
        .vxp-icon {
          color: $color-hover;
        }
      }
    }

    &--#{$type}#{&}--underline {
      &::after {
        background-color: $color-hover;
      }
    }

    &--#{$type}#{&}--disabled {
      &,
      &:hover {
        &,
        .vxp-icon {
          color: color.mix($vxp-color-white, $color-base, 50%);
        }
      }
    }
  }
}
