@use 'sass:map';

@use './shared' as *;
@use './design' as *;

$bubble: () !default;
$bubble: map.merge(
  (
    bg-color: get-css-var('bg-color-base'),
    b-color: get-css-var('border-color-base'),
    s-color: get-css-var('shadow-color-base'),
    border: get-css-var('border-shape') get-css-var('bubble-b-color'),
    radius: get-css-var('radius-base'),
    min-width: 60px,
    min-height: 30px,
    content-v-padding: 8px,
    content-h-padding: 14px,
    content-shadow: get-css-var('shadow-shape') get-css-var('bubble-s-color'),
    arrow-size: 7px,
    arrow-v-offset: 16px,
    arrow-h-offset: 28px
  ),
  $bubble
);

.#{$namespace}-bubble {
  &-vars {
    @include define-preset-values('bubble', $bubble);
  }

  @include basis;

  display: inline-flex;
  flex-direction: column;
  justify-content: center;

  &__content {
    position: relative;
    min-width: get-css-var('bubble-min-width');
    min-height: get-css-var('bubble-min-height');
    padding: get-css-var('bubble-content-v-padding') get-css-var('bubble-content-h-padding');
    word-break: break-all;
    background-color: get-css-var('bubble-bg-color');
    border: get-css-var('bubble-border');
    border-radius: get-css-var('bubble-radius');
  }

  &--background &__content {
    border: 0;
  }

  &--shadow &__content {
    border: 0;
    box-shadow: get-css-var('bubble-content-shadow');
  }

  &__arrow {
    &,
    &::after {
      position: absolute;
      width: 0;
      height: 0;
      border: {
        width: 0;
        color: transparent;
        style: solid;
      }
    }

    &::after {
      content: '';
    }
  }

  &--background &__arrow::after {
    display: none;
  }

  $size: get-css-var('bubble-arrow-size');
  $padding: calc(#{$size} + 4px);
  $bg-color: get-css-var('bubble-bg-color');
  $border-color: get-css-var('bubble-b-color');
  $v-offset: get-css-var('bubble-arrow-v-offset');
  $h-offset: get-css-var('bubble-arrow-h-offset');

  &--top,
  &--top-start,
  &--top-end {
    padding: $size 0 $padding;
  }

  @mixin top-arrow {
    bottom: 0;
    border-width: $size $size 0;
    border-top-color: $border-color;
    transform: translate(-50%, 100%);

    &::after {
      bottom: 1px;
      border-width: $size $size 0;
      border-top-color: $bg-color;
      transform: translateX(-50%);

      @include rtl {
        transform: translateX(50%);
      }
    }
  }

  &--top &__arrow {
    @include top-arrow;

    left: 50%;
  }

  &--top-start &__arrow {
    @include top-arrow;

    left: $h-offset;
  }

  &--top-end &__arrow {
    @include top-arrow;

    left: calc(100% - #{$h-offset});
  }

  &--bottom,
  &--bottom-start,
  &--bottom-end {
    padding: $padding 0 $size;
  }

  @mixin bottom-arrow {
    top: 0;
    border-width: 0 $size $size;
    border-bottom-color: $border-color;
    transform: translate(-50%, -100%);

    &::after {
      top: 1px;
      border-width: 0 $size $size;
      border-bottom-color: $bg-color;
      transform: translateX(-50%);

      @include rtl {
        transform: translateX(50%);
      }
    }
  }

  &--bottom &__arrow {
    @include bottom-arrow;

    left: 50%;
  }

  &--bottom-start &__arrow {
    @include bottom-arrow;

    left: $h-offset;
  }

  &--bottom-end &__arrow {
    @include bottom-arrow;

    left: calc(100% - #{$h-offset});
  }

  &--left,
  &--left-start,
  &--left-end {
    padding: 0;
    padding-inline: $size $padding;
  }

  @mixin left-arrow {
    inset-inline-end: 0;
    border-width: $size 0;
    border-inline-start-color: $border-color;
    border-inline-width: $size;
    transform: translate(100%, -50%);

    @include rtl {
      transform: translate(-100%, -50%);
    }

    &::after {
      inset-inline-end: 1px;
      border-width: $size 0;
      border-inline-width: $size 0;
      border-inline-start-color: $bg-color;
      transform: translateY(-50%);
    }
  }

  &--left &__arrow {
    @include left-arrow;

    top: 50%;
  }

  &--left-start &__arrow {
    @include left-arrow;

    top: $v-offset;
  }

  &--left-end &__arrow {
    @include left-arrow;

    top: calc(100% - #{$v-offset});
  }

  &--right,
  &--right-start,
  &--right-end {
    padding: 0;
    padding-inline: $padding $size;
  }

  @mixin right-arrow {
    inset-inline-start: 0;
    border-width: $size 0;
    border-inline-width: 0 $size;
    border-inline-end-color: $border-color;
    transform: translate(-100%, -50%);

    @include rtl {
      transform: translate(100%, -50%);
    }

    &::after {
      inset-inline-start: 1px;
      border-width: $size 0;
      border-inline-width: 0 $size;
      border-inline-end-color: $bg-color;
      transform: translateY(-50%);
    }
  }

  &--right &__arrow {
    @include right-arrow;

    top: 50%;
  }

  &--right-start &__arrow {
    @include right-arrow;

    top: $v-offset;
  }

  &--right-end &__arrow {
    @include right-arrow;

    top: calc(100% - #{$v-offset});
  }
}
