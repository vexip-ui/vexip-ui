@use 'sass:map';

@use './design' as *;

$timeline: () !default;
$timeline: map.merge(
  (
    item-span: 10px,
    item-span-pending: 32px,
    pointer-color: get-css-var('color-primary-base'),
    pointer-bg-color: get-css-var('color-white'),
    pointer-b-width: 2px,
    pointer-b-color: get-css-var('color-primary-base'),
    pointer-size: 13px,
    line-width: get-css-var('border-width'),
    line-style: solid,
    line-style-pending: dashed,
    line-color: get-css-var('border-color-base')
  ),
  $timeline
);

.#{$namespace}-timeline {
  &-vars {
    @include define-preset-values('timeline', $timeline);
  }

  @mixin define-timeline-style($style-map) {
    @include define-preset-style('timeline', $style-map);
  }

  @include basis;

  display: inline-flex;
  flex-direction: column;
  padding-left: 6px;

  &--both-sides {
    padding-left: 0;
  }

  &__item {
    position: relative;
    padding-bottom: get-css-var('timeline-item-span');

    $types: success error warning;

    @each $type in $types {
      &--#{$type} {
        @include define-timeline-style((
          pointer-color: 'color' $type 'base',
          pointer-b-color: 'color' $type 'base'
        ));
      }
    }
  }

  &--both-sides &__item {
    align-self: flex-end;
    width: 50%;

    &:nth-child(even) {
      align-self: flex-start;
    }
  }

  &__signal {
    position: absolute;
    top: 0;
    left: calc(get-css-var('timeline-pointer-size') * -0.5 + 0.5px);
    z-index: 1;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: get-css-var('timeline-pointer-size');
    height: get-css-var('timeline-pointer-size');
  }

  &--both-sides &__item:nth-child(even) &__signal {
    left: calc(100% - 6px);
  }

  &--signal-click &__signal {
    cursor: pointer;
  }

  &__pointer {
    width: 100%;
    height: 100%;
    color: get-css-var('timeline-pointer-color');
    background-color: get-css-var('timeline-pointer-bg-color');
    border: get-css-var('timeline-pointer-b-width') solid get-css-var('timeline-pointer-b-color');
    border-radius: 50%;
  }

  &__line {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 0;
    border-left: {
      width: get-css-var('timeline-line-width');
      style: get-css-var('timeline-line-style');
      color: get-css-var('timeline-line-color');
    }
  }

  &--both-sides &__item:nth-child(even) &__line {
    left: 100%;
  }

  &__content {
    position: relative;
    top: -6px;
    display: flex;
    flex-direction: column;
    padding: {
      bottom: 8px;
      left: 16px;
    }
  }

  &--both-sides &__item:nth-child(even) &__content {
    align-items: flex-end;
    padding: {
      right: 16px;
      left: 0;
    }
  }

  &__item:last-child &__line {
    display: none;
  }

  $line: #{&}__line;

  &--pending &__item:nth-last-child(2) {
    padding-bottom: get-css-var('timeline-item-span-pending');

    #{$line} {
      border-left-style: get-css-var('timeline-line-style-pending');
    }
  }
}
