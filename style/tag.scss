@use 'sass:color';
@use 'sass:map';

@use '../design' as *;
@use './icon.scss';

// $types: primary info success error warning;

$tag: () !default;
$tag: map.merge(
  (
    color: get-css-var('content-color-base'),
    bg-color: get-css-var('fill-color-background'),
    b-color: get-css-var('border-color-base'),
    border: get-css-var('border-shape') get-css-var('tag-b-color'),
    radius: get-css-var('border-radius-base'),
    series-span: 0.3em,
    small-font-size: get-css-var('font-size-secondary'),
    default-font-size: get-css-var('font-size-base'),
    large-font-size: get-css-var('font-size-primary'),
    close-color: get-css-var('content-color-secondary')
  ),
  $tag
);

.vxp-tag {
  &-vars {
    @include define-preset-values('tag', $tag);
  }

  @mixin define-tag-style($style-map) {
    @include define-preset-style('tag', $style-map);
  }

  @include basis;

  display: inline-flex;
  align-items: center;
  padding: 0 0.5em;
  font-size: get-css-var('tag-default-font-size');
  color: get-css-var('tag-color');
  background-color: get-css-var('tag-bg-color');
  border: get-css-var('tag-border');
  border-radius: get-css-var('tag-radius');
  transition: get-css-var('transition-color'), get-css-var('transition-background');

  & + & {
    margin-left: get-css-var('tag-series-span');
  }

  &--small {
    font-size: get-css-var('tag-small-font-size');
  }

  &--large {
    font-size: get-css-var('tag-large-font-size');
  }

  &--circle {
    border-radius: 1em;
  }

  &__close {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 12px;
    margin-top: 1px;
    margin-left: 0.5em;
    color: get-css-var('tag-close-color');
    cursor: pointer;
    opacity: 60%;
    transition: get-css-var('transition-opacity');

    &:hover {
      opacity: 100%;
    }
  }

  $close: #{&}__close;

  @each $type in $types {
    &--#{$type} {
      @include define-tag-style((
        color: 'content-color-reverse',
        bg-color: 'color' $type 'base',
        b-color: 'color' $type 'base',
        close-color: 'content-color-reverse'
      ));
    }

    &--border#{&}--#{$type},
    &--simple#{&}--#{$type} {
      @include define-tag-style((
        color: 'color' $type 'base',
        close-color: 'color' $type 'base'
      ));
    }

    &--simple#{&}--#{$type} {
      @include define-tag-style((
        bg-color: 'color' $type 'light-9'
      ));
    }
  }

  $preset-color-map: (
    'lime': rgb(18 228 83),
    'pink': rgb(240 101 149),
    'magenta': rgb(235 47 150),
    'tomato': rgb(250 99 99),
    'orange': rgb(255 146 43),
    'cyan': rgb(19 194 194),
    'navy': rgb(47 65 224),
    'gold': rgb(236 202 11),
    'purple': rgb(114 46 209)
  );

  @each $name in map-keys($preset-color-map) {
    $color: map.get($preset-color-map, $name);

    @at-root {
      &--#{$name} {
        @include define-tag-style((
          color: 'content-color-reverse',
          close-color: 'content-color-reverse'
        ));

        @include define-css-var('tag-bg-color', $color);
        @include define-css-var('tag-b-color', $color);
      }

      &--border#{&}--#{$name},
      &--simple#{&}--#{$name} {
        @include define-css-var('tag-color', $color);
        @include define-css-var('tag-close-color', $color);
      }

      &--simple#{&}--#{$name} {
        @include define-css-var('tag-bg-color', color.mix($color-white, $color, 90%));
      }
    }
  }

  &--border {
    background-color: transparent;
  }
}
